{
  "name": "stdout",
  "version": "0.0.3",
  "description": "pipe objects to console.log",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "stdout",
    "console",
    "log",
    "stream",
    "object"
  ],
  "author": {
    "name": "Carter Thaxton",
    "email": "carter.thaxton@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/carter-thaxton/node-stdout.git"
  },
  "bugs": {
    "url": "https://github.com/carter-thaxton/node-stdout/issues"
  },
  "dependencies": {
    "through2": "~0.2.3"
  },
  "homepage": "https://github.com/carter-thaxton/node-stdout",
  "_id": "stdout@0.0.3",
  "dist": {
    "shasum": "400d743304ed60c741bd94d4c9ecdc44d22160e1",
    "tarball": "http://registry.npmjs.org/stdout/-/stdout-0.0.3.tgz"
  },
  "_from": "stdout@0.0.3",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "nonrectangular",
    "email": "carter.thaxton@gmail.com"
  },
  "maintainers": [
    {
      "name": "nonrectangular",
      "email": "carter.thaxton@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "400d743304ed60c741bd94d4c9ecdc44d22160e1",
  "_resolved": "https://registry.npmjs.org/stdout/-/stdout-0.0.3.tgz",
  "readme": "stdout\n======\n\nWhen working with object streams, do you ever wish you could just pipe to `console.log`?\n\nNow you can.\n\n```\nvar request = require('request')\nvar JSONStream = require('JSONStream')\nvar stdout = require('stdout')\n\nrequest('http://isaacs.couchone.com/registry/_all_docs')\n  .pipe(JSONStream.parse('rows.*'))\n  .pipe(stdout())\n```\n\n\nstdout([outputStream, prefix])\n----------------------\n\n`outputStream` is optional.  Defaults to `process.stdout`, but you can provide another stream like `process.stderr` if you want.\n\n`prefix` is an optional string argument. If provided it will prepend each message with the prefix.\n\ne.g. `stdout('foo: ')('bar')` would write out `foo: bar`\n\nIn the browser, it will automatically use `console.log`\n\nReturns a writable stream that accepts Buffers, strings, or objects.\n\n- When given a Buffer, it outputs it directly.  \n- When given a string, it just outputs it with a newline, just like `console.log`.  \n- When given an object, it uses `util.inspect` and a newline, just like `console.log`.  \n\n\nLicense\n-------\nMIT\n",
  "readmeFilename": "README.md"
}
